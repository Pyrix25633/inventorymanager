generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model TempUser {
  username         String @id @db.VarChar(32)
  email            String @unique @db.VarChar(64)
  passwordHash     String @db.Char(60)
  verificationCode Int
}

model User {
  id              Int     @id @default(autoincrement())
  username        String  @unique @db.VarChar(32)
  email           String  @unique @db.VarChar(64)
  customization   Json
  passwordHash    String  @db.Char(60)
  token           String  @db.Char(128)
  sessionDuration Int     @default(14) @db.TinyInt
  tfaKey          String? @db.Char(52)

  locations Location[]
  products Product[]
  food Food[]
  series Series[]
  books Book[]
}

model Location {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId Int
  name   String @db.VarChar(32)

  @@unique([userId, name])

  products Product[]
}

enum UnitOfMeasurement {
  PIECES
  GRAMS
}

model Product {
  id                       Int               @id @default(autoincrement())
  user                     User              @relation(fields: [userId], references: [id])
  userId                   Int
  name                     String            @db.VarChar(32)
  defaultQuantity          Int               @db.UnsignedSmallInt
  defaultUnitOfMeasurement UnitOfMeasurement
  defaultLocation          Location          @relation(fields: [defaultLocationId], references: [id])
  defaultLocationId        Int

  @@unique([userId, name])

  food Food[]
}

model Food {
  id                Int               @id @default(autoincrement())
  user              User              @relation(fields: [userId], references: [id])
  userId            Int
  product           Product           @relation(fields: [productId], references: [id])
  productId         Int
  initialQuantity   Int               @db.UnsignedSmallInt
  currentQuantity   Int               @db.UnsignedSmallInt
  unitOfMeasurement UnitOfMeasurement
  expiration        DateTime          @db.Date
}

model Series {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId Int
  name   String @db.VarChar(32)

  @@unique([userId, name])

  book Book[]
}

model Book {
  id       Int    @id @default(autoincrement())
  user     User   @relation(fields: [userId], references: [id])
  userId   Int
  series   Series @relation(fields: [seriesId], references: [id])
  seriesId Int
  number   String @db.VarChar(16)
}